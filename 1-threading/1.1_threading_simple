import threading
import time


# ——————————————————————————————————————————————————————————————————————————————————————————————
# 通过threading.Thread

# def target():
#     print("the current threading %s is runing"
#           % threading.current_thread().name)
#     time.sleep(1)
#     print("the current threading %s is ended" % threading.current_thread().name)
#
#
# print("the current threading %s is runing" % threading.current_thread().name)
# ## 属于线程t的部分
# t = threading.Thread(target=target)
# t.start()
# ## 属于线程t的部分
# t.join()  # join是阻塞当前线程(此处的当前线程是主线程) 主线程直到Thread-1结束之后才结束
# print("the current threading %s is ended" % threading.current_thread().name)


# -----------------------------------------------------------------------------------------
# 通过继承threading.Thread定义子类创建多线程
# 使用Threading模块创建线程，直接从threading.Thread继承，然后重写init方法和run方法
# class myThread(threading.Thread):  # 继承父类threading.Thread
#     def __init__(self, threadID, name, counter):
#         threading.Thread.__init__(self)
#         self.threadID = threadID
#         self.name = name
#         self.counter = counter
#
#     def run(self):
#         print("starting" + self.name)
#         print_time(self.name, self.counter, 5)
#         print("Exiting" + self.name)
#
#
# def print_time(threadName, delay, counter):
#     while counter:
#         time.sleep(delay)
#         print("%s process at:%s" % (threadName, time.ctime(time.time())))
#         counter -= 1
#
#
# # 创建新线程
# thread1 = myThread(1, "Thread-1", 1)
# thread2 = myThread(2, "Thread-2", 2)
#
# # 开启线程
# thread1.start()
# thread2.start()
#
# # 等待线程结束
# thread1.join()
# thread2.join()
#
# print("Exiting Main Thread")


# ------------------------------------------------------------------------------
# 线程间同步
# （1）锁机制：threading的lock类，用该类的acquire函数进行加锁，用release函数进行解锁
class myThread(threading.Thread):
    def __init__(self, threadID, name, counter):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.counter = counter

    def run(self):
        print("Starting" + self.name)
        # 获得锁，成功获得锁定后返回True
        # 可选的timeout参数不填时将一直阻塞直到获得锁定
        # 否则超时后将返回False
        threadLock.acquire()
        print_time(self.name, self.counter, 5)
        # 释放锁
        threadLock.release()


def print_time(threadName, delay, counter):
    while counter:
        time.sleep(delay)
        print("%s:%s" % (threadName, time.ctime(time.time())))
        counter -= 1


threadLock = threading.Lock()
threads = []

# 创建新线程
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# 开启新线程
thread1.start()
thread2.start()

# 添加线程到线程列表
threads.append(thread1)
threads.append(thread2)

# 等待所有线程完成
for t in threads:
    t.join()

print("Exiting Main Thread")
